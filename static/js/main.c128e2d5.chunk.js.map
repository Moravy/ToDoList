{"version":3,"sources":["Component/Header.jsx","Container/todoItem.jsx","Container/todo_list.jsx","App.js","index.js"],"names":["Header","className","Buttons","state","item","Fragment","type","onClick","this","handleAdd","props","onDelete","id","todoEntries","value","Items","createTask","Component","todo_list","handleDelete","itemId","items","data","filter","element","setState","fetch","method","then","res","text","console","log","handleDup","newid","parseInt","toString","added","concat","todo","document","getElementsByClassName","placeholder","handleSubmit","bind","handleChange","response","json","fromApi","map","length","key","event","target","preventDefault","headers","body","JSON","stringify","inputField","status","onSubmit","onChange","disabled","renderData","App","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.c128e2d5.chunk.js","sourcesContent":["import React from 'react';\r\nexport const Header = () =>  {\r\n    return(\r\n    <div className=\"header\">\r\n        <h1>ToDo List</h1>\r\n    </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nclass Buttons extends Component {\r\n    state = {  }\r\n\r\n    //2.\r\n    // I passed Item (this.props.values) so that I can return the span description\r\n    // Create two buttons where one called the function handleDelete with parameter of (this.props.id)\r\n    createTask(item){\r\n        return <React.Fragment>\r\n            <span className=\"presentation\"><h5>{item}</h5></span>\r\n            <div className= \"buttons\">          \r\n                <button type=\"button\" onClick={this.handleAdd} className=\"b btn btn-success\"><i className=\"fa fa-check\"></i></button>\r\n                <button type=\"button\" onClick={() => this.props.onDelete(this.props.id)}className=\"b btn btn-danger\"><i className=\"fa fa-trash\"></i></button>\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n    \r\n    \r\n    render() { \r\n        //1.\r\n        //In todo_list.jsx I pass abunch of \"parameter\"(idk what its call) eg. key={something}, this allow us to retrieve information from TodoList\r\n        //So you can do this.props.value, this.props.key\r\n        // then I call createTask \r\n        var todoEntries = this.props.value;\r\n        var Items = this.createTask(todoEntries);\r\n \r\n        return (           \r\n        <div>\r\n            {Items}\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default Buttons;","import React,{Component} from 'react';\r\nimport Todoitem from \"./todoItem\";\r\nclass todo_list extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleAdd = this.handleAdd.bind(this)\r\n        this.state = {\r\n          value: '',\r\n          data: [],\r\n          id: '0',\r\n        };\r\n      }\r\n\r\n    // Fetch all the todoItem from the APi and setState\r\n    componentDidMount(){\r\n        this.handleAdd();\r\n    }\r\n\r\n    handleAdd(){\r\n      fetch('https://us-central1-clear-tooling-281208.cloudfunctions.net/first-function/users')\r\n      .then(response =>  response.json())\r\n      .then(fromApi => {\r\n        console.log(fromApi)\r\n        this.setState({data:fromApi})\r\n        fromApi.map((element) =>(\r\n          this.setState({id:element.id})\r\n        ))\r\n      });\r\n    }\r\n    //When the delete this function is triggered\r\n    //This function has a parameter of itemId. This parameter will be used to filter the this.state.data\r\n    //the filter is if the parameter is if current element.id \"not equal value or not equal type\" itemId\r\n    //Once done setState to a new list (Since react recommend to think state is immutable)\r\n    //After we delete the item from PSQL using API(FROM pgAPi.js) using DELETE.\r\n    handleDelete = itemId =>{\r\n      const items = this.state.data.filter((element) => element.id !== itemId);\r\n      this.setState({data:items})\r\n      fetch('https://us-central1-clear-tooling-281208.cloudfunctions.net/first-function/users/'+itemId,{\r\n        method: 'DELETE',\r\n      })\r\n      .then(res => res.text())\r\n      .then(res => console.log(res))\r\n    }\r\n\r\n\r\n    // Dynamically create new component depend on how many item there are on the list.\r\n    // Passing keys, id will allow me to identify which object this is.\r\n    // Passing value, so each of the component knows what todoItem it is\r\n    // Passing Delete allow the todoItem to use THIS.handleDelete\r\n    renderData(){\r\n      if (this.state.data.length === 0) return <p>You don't have anything to do today</p>\r\n      return  <React.Fragment>\r\n                {this.state.data.map((element) => (\r\n                  <Todoitem key={element.id} id={element.id} value={element.todo} onDelete={this.handleDelete} />\r\n                ))}\r\n              </React.Fragment>\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({value:event.target.value})\r\n      }\r\n\r\n     \r\n    handleDup=() =>{\r\n      var newid = parseInt(this.state.id)+1\r\n      console.log(this.state.id)\r\n      this.setState({id:newid.toString()},()=>{\r\n        console.log(this.state.id)\r\n        const added = this.state.data.concat({id:this.state.id,todo:this.state.value })\r\n        this.setState({data:added})})\r\n        var inputField = document.getElementsByClassName(\"add\")[0]\r\n        inputField.placeholder = \"Succeed\"\r\n    }\r\n\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      fetch('https://us-central1-clear-tooling-281208.cloudfunctions.net/first-function/users',{\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({id:this.state.id,todo: this.state.value })\r\n        }).then(res =>{\r\n          var inputField = document.getElementsByClassName(\"add\")[0]\r\n          res.status!== 400 ? this.handleDup() : \r\n          inputField.placeholder = \"You have already enter this task\"\r\n          inputField.value = \"\"\r\n        })\r\n      }\r\n\r\n    \r\n    render() { \r\n        return (\r\n          <React.Fragment>\r\n          <form  onSubmit={this.handleSubmit}>\r\n            <input value={this.state.value} onChange={this.handleChange} type=\"text\" className=\"add\"/>\r\n            <div className=\"buttons\">\r\n              <button type=\"submit\" className=\"b btn btn-success\"><i className=\"fa fa-plus\"></i></button>\r\n              <button type=\"button\" className=\"b disable \" disabled><i className=\"fa fa-plus\"></i></button>\r\n            </div>\r\n          </form>\r\n          {this.renderData()}\r\n          </React.Fragment>\r\n         );\r\n    }\r\n}\r\n\r\n// OK SO WE JUST MAKE ONE ITEM FOR NOW AND AFTER USE A CONTAINER TO MAKE MULTIPLE ITEMS\r\nexport default todo_list;","import React ,{Component} from 'react';\nimport {Header} from './Component/Header';\nimport Todolist from './Container/todo_list';\n\nclass App extends Component {\n    state = { }\n    render() { \n        return ( \n            <React.Fragment>\n                <Header />\n                <Todolist />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n\n\n\n\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App.js'\n\nimport './index.css';\n\nReactDom.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}